##EC2Instance##

---
AWSTemplateFormatVersion: "2010-09-09"
Resources:
  Wordpressinstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - wordpressRDS
      - wordpressEFS
    Properties:
      ImageId: "ami-0c1bc246476a5572b"
      InstanceType: "t2.micro"
      KeyName: "MyDemoKey"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            cd /home/ec2-user
            yum update -y
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            yum install -y httpd mariadb-server
            yum install php-gd -y
            systemctl start httpd
            systemctl enable httpd
            yum install amazon-efs-utils -y
            yum install nfs-utils -y
            mount -t efs -o tls ${wordpressEFS}:/ /var/www/html
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0664 {} \;
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            cp wordpress/wp-config-sample.php wordpress/wp-config.php
            sed -i -e "s/localhost/${wordpressRDS.Endpoint.Address}/g" wordpress/wp-config.php
            sed -i -e "s/database_name_here/wordpressRDS/g" wordpress/wp-config.php
            sed -i -e "s/password_here/Password/g" wordpress/wp-config.php
            sed -i -e "s/username_here/admin/g" wordpress/wp-config.php
            cp -r wordpress/* /var/www/html
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            mv wp-cli.phar /usr/local/bin/wp
            cd /var/www/html
            wp core install --url=${wordpressLB} --title="Bobby boy" --admin_name=Admin --admin_password=Password --admin_email=test@gmail.com
      SecurityGroups:
        - !Ref EC2SecGrp
        
##InstanceTemplate##
    
  wordpressTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-Template-for-wordpress"
      LaunchTemplateData:
        ImageId: "ami-0c1bc246476a5572b"
        InstanceType: "t2.micro"
        KeyName: "MyDemoKey"
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
              yum install -y httpd
              yum install php-gd -y
              yum install amazon-efs-utils -y
              mount -t efs -o tls ${wordpressEFS}:/ /var/www/html
              systemctl start httpd
              systemctl enable httpd
        SecurityGroups: 
          - !Ref TemplateSecGrp
        
##LoadBalancer##   

  wordpressLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: wordpressLB
      Scheme: internet-facing
      Subnets:
        - "subnet-06546834f63bd4008"
        - "subnet-0e3dd338be7d1de30"
        - "subnet-03196cfeb08cb44ae"
      SecurityGroups:
        - !GetAtt LBSecGrp.GroupId
        
##AutoScalingGrp##

  wordpressASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: Wordpressinstance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref wordpressTemplate
        Version: !GetAtt wordpressTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      AvailabilityZones:
        - "eu-west-1a"
        - "eu-west-1b"
        - "eu-west-1c"
      TargetGroupARNs: 
        - !Ref wordpressTargetGrp
    
##ListenerForLB##

  wordpressListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref wordpressTargetGrp
      LoadBalancerArn: !Ref wordpressLB
      Port: 80
      Protocol: HTTP
      
##TargetGroupForListenerLBandASG##

  wordpressTargetGrp:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties: 
      Name: wordpressTargetGrp
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0e06aeb26ce0e43d5
        
##CreateRDS###

  wordpressRDS:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: db.t2.micro
      DBName: wordpressRDS
      AllocatedStorage: 20
      StorageType: gp2
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: Rgn8823!!
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !GetAtt RDSSecGrp1.GroupId
        
##CreateEFSAndMountTargets
        
  wordpressEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: false
      PerformanceMode: maxIO
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: EFS
          Value: TestFileSystem
          
  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties: 
      FileSystemId: !Ref wordpressEFS
      SubnetId: subnet-06546834f63bd4008
      SecurityGroups:
        - !GetAtt EFSSecGrp1.GroupId
        
  MountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties: 
      FileSystemId: !Ref wordpressEFS
      SubnetId: subnet-0e3dd338be7d1de30
      SecurityGroups:
        - !GetAtt EFSSecGrp1.GroupId
        
  MountTarget3:
    Type: 'AWS::EFS::MountTarget'
    Properties: 
      FileSystemId: !Ref wordpressEFS
      SubnetId: subnet-03196cfeb08cb44ae
      SecurityGroups:
        - !GetAtt EFSSecGrp1.GroupId
        
#########################################################SECGRPS##############        
        
##SecurityGroupForEC2Instance##

  EC2SecGrp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: EC2 SecurityGroup
      GroupDescription: Enables SSH and HTTP
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupName: !Ref LBSecGrp

##SecurityGroupForTemplate##
  TemplateSecGrp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: TemplateSecGrp
      GroupDescription: Enables HTTP
      SecurityGroupIngress:
        SourceSecurityGroupName: !Ref LBSecGrp
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
          
##SecurityGroupForLB##

  LBSecGrp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: LB SecurityGroup
      GroupDescription: Enables HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
##SecurityGroupForEFS##
  
  EFSSecGrp1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables 2049
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
          
##SecurityGroupForRDS##
  RDSSecGrp1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RDSSecGrp1
      GroupDescription: Enables 3306
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          

